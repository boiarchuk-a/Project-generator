

services:
  app:
    build: ./app/
    image: event-planner-api:latest
    container_name: event-planner-api
    restart: unless-stopped
    env_file:
    - ./app/.env
    volumes:
      - ./app:/app
    depends_on:
      database:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - event-planner-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:80/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  ml_worker:
    build: ./ml_worker/
    image: event-planner-ml-worker:latest
    container_name: event-planner-ml-worker
    restart: unless-stopped
    command: python main.py
    volumes:
      - ./ml_worker:/app
    depends_on:
      database:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - event-planner-network

  web-proxy:
    image: nginx:latest
    container_name: event-planner-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      app:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      # - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - event-planner-network

  rabbitmq:
    image: rabbitmq:3.13.1-management-alpine
    container_name: rabbitmq_for_planner
    hostname: rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15672:15672"  # Management UI
      - "5672:5672"    # AMQP protocol
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 20s
      timeout: 10s
      retries: 3
    networks:
      - event-planner-network

  database:
    image: postgres:latest
    platform: linux/amd64
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped

  ollama:
    image: ollama/ollama
    container_name: gemma-server
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    environment:
      - OLLAMA_MODELS=qwen2.5:7b-instruct
    networks:
      - event-planner-network

volumes:
  rabbitmq_data:
    driver: local
  db_data:
    driver: local
  ollama_data:

networks:
  event-planner-network:
    name: event-planner-network
    driver: bridge